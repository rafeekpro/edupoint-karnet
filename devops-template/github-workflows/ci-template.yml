name: CI - Build and Push Images

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  # TODO: Replace with your GitHub username/organization
  IMAGE_OWNER: YOUR_GITHUB_USERNAME
  # TODO: Replace with your repository name
  IMAGE_NAME: YOUR_REPO_NAME
  
jobs:
  # ===========================================
  # BACKEND BUILD & TEST
  # ===========================================
  backend:
    name: Backend - Build, Test & Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # TODO: Adjust Python version if needed
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # TODO: Add dev requirements if needed
        # pip install -r requirements-dev.txt
    
    - name: Run backend linting
      working-directory: ./backend
      run: |
        # TODO: Adjust linting commands based on your setup
        pip install ruff black mypy
        ruff check .
        black --check .
        mypy . --ignore-missing-imports
    
    - name: Run backend tests
      working-directory: ./backend
      run: |
        # TODO: Adjust test command based on your setup
        pip install pytest pytest-cov pytest-asyncio
        pytest tests/ -v --cov=app --cov-report=term-missing --cov-report=xml
    
    - name: Upload coverage reports
      if: github.event_name == 'pull_request'
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Generate Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=run-${{ github.run_number }}-{{sha}},enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.meta.outputs.version }}

  # ===========================================
  # FRONTEND BUILD & TEST
  # ===========================================
  frontend:
    name: Frontend - Build, Test & Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # TODO: Adjust Node version if needed
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend linting
      working-directory: ./frontend
      run: |
        # TODO: Adjust linting commands based on your setup
        npm run lint
        # npm run format:check
    
    - name: Run frontend type checking
      working-directory: ./frontend
      run: |
        # TODO: Enable if using TypeScript
        npm run type-check || npm run tsc --noEmit
    
    - name: Run frontend tests
      working-directory: ./frontend
      run: |
        # TODO: Adjust test command based on your setup
        npm run test:unit -- --coverage
    
    - name: Build frontend
      working-directory: ./frontend
      run: |
        # TODO: Set any build-time environment variables
        npm run build
    
    - name: Upload coverage reports
      if: github.event_name == 'pull_request'
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Generate Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=run-${{ github.run_number }}-{{sha}},enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.meta.outputs.version }}

  # ===========================================
  # SECURITY SCANNING
  # ===========================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write
    
    strategy:
      matrix:
        image: [backend, frontend]
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}/${{ matrix.image }}:run-${{ github.run_number }}-${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-${{ matrix.image }}'

  # ===========================================
  # E2E TESTS (Optional)
  # ===========================================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Playwright
      working-directory: ./e2e
      run: |
        npm ci
        npx playwright install --with-deps
    
    - name: Start services with Docker Compose
      run: |
        # TODO: Create docker-compose.test.yml for E2E tests
        docker-compose -f docker-compose.test.yml up -d
        sleep 10  # Wait for services to be ready
    
    - name: Run E2E tests
      working-directory: ./e2e
      env:
        BASE_URL: http://localhost:3000
        API_URL: http://localhost:8000
      run: |
        npx playwright test
    
    - name: Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: e2e/playwright-report/
        retention-days: 7

  # ===========================================
  # SUMMARY
  # ===========================================
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: always()
    
    steps:
    - name: Create summary
      run: |
        echo "## CI Build Summary 🚀" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Docker Images Built" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Tag |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-----|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | ${{ needs.backend.result }} | run-${{ github.run_number }}-${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${{ needs.frontend.result }} | run-${{ github.run_number }}-${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.backend.result }}" == "success" ] && [ "${{ needs.frontend.result }}" == "success" ]; then
          echo "✅ **All builds completed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some builds failed. Please check the logs.**" >> $GITHUB_STEP_SUMMARY
        fi