name: CD - Deploy to Kubernetes

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
      image-tag:
        description: 'Docker Image Tag (leave empty to use latest from main)'
        required: false
        type: string
      deploy-backend:
        description: 'Deploy Backend'
        required: true
        default: true
        type: boolean
      deploy-frontend:
        description: 'Deploy Frontend'
        required: true
        default: true
        type: boolean
      run-e2e-tests:
        description: 'Run E2E Tests'
        required: true
        default: true
        type: boolean
  
  workflow_run:
    workflows: ["CI - Build and Push Images"]
    types:
      - completed
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NAMESPACE: edupoint-prod

jobs:
  setup-vpn-and-deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Determine image tag
      id: determine-tag
      run: |
        if [ "${{ github.event_name }}" == "workflow_run" ]; then
          # Get the tag from the CI workflow run
          echo "IMAGE_TAG=${{ github.event.workflow_run.id }}-${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
        elif [ -n "${{ inputs.image-tag }}" ]; then
          # Use the provided tag
          echo "IMAGE_TAG=${{ inputs.image-tag }}" >> $GITHUB_OUTPUT
        else
          # Use latest from main
          echo "IMAGE_TAG=${{ github.run_id }}-${{ github.sha }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Install kubectl (before VPN)
      run: |
        sudo snap install kubectl --classic
        kubectl version --client
    
    - name: Install WireGuard
      run: |
        sudo apt-get update
        sudo apt-get install -y wireguard-tools resolvconf
    
    - name: Configure WireGuard VPN
      run: |
        # Create WireGuard configuration
        echo "${{ secrets.WIREGUARD_CONFIG }}" | base64 -d | sudo tee /etc/wireguard/wg0.conf > /dev/null
        sudo chmod 600 /etc/wireguard/wg0.conf
        
        # Start WireGuard
        sudo wg-quick up wg0
        
        # Verify connection
        sudo wg show
        
        # Test connectivity (adjust the IP to your Kubernetes API server)
        ping -c 3 ${{ secrets.K8S_API_SERVER_IP }} || echo "Ping failed, but continuing..."
    
    - name: Configure kubectl
      run: |
        # Create .kube directory
        mkdir -p $HOME/.kube
        
        # Create kubeconfig directly
        cat > $HOME/.kube/config << EOF
        apiVersion: v1
        kind: Config
        clusters:
        - cluster:
            certificate-authority-data: ${{ secrets.K8S_CA_CERT }}
            server: https://10.204.200.1:6443
          name: default
        contexts:
        - context:
            cluster: default
            user: default
          name: default
        current-context: default
        users:
        - name: default
          user:
            client-certificate-data: ${{ secrets.K8S_CLIENT_CERT }}
            client-key-data: ${{ secrets.K8S_CLIENT_KEY }}
        EOF
        
        chmod 600 $HOME/.kube/config
    
    - name: Test network connectivity
      run: |
        echo "=== Network diagnostics ==="
        ip addr show
        ip route show
        echo "=== Testing connectivity ==="
        ping -c 3 10.204.200.1 || echo "Cannot ping VPN gateway"
        ping -c 3 10.0.0.4 || echo "Cannot ping K8s API"
        nc -zv 10.0.0.4 6443 || echo "Cannot connect to K8s API port"
        curl -k https://10.0.0.4:6443/version || echo "Cannot reach K8s API"
    
    - name: Test kubectl connection
      run: |
        kubectl version --client
        kubectl cluster-info
        kubectl get namespaces
    
    - name: Create/Update namespace
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Create GitHub Container Registry secret
      run: |
        kubectl create secret docker-registry ghcr-secret \
          --namespace=${{ env.NAMESPACE }} \
          --docker-server=${{ env.REGISTRY }} \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GITHUB_TOKEN }} \
          --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Create application secrets
      run: |
        kubectl create secret generic edupoint-prod-secrets \
          --namespace=${{ env.NAMESPACE }} \
          --from-literal=db-password=${{ secrets.DB_PASSWORD_PROD }} \
          --from-literal=jwt-secret=${{ secrets.JWT_SECRET_KEY_PROD }} \
          --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Deploy Backend
      if: ${{ (github.event_name == 'workflow_dispatch' && inputs.deploy-backend) || github.event_name == 'workflow_run' }}
      run: |
        cd devops/kubernetes/overlays/prod
        
        # Update image tag
        kustomize edit set image \
          ghcr.io/rafeekpro/edupoint-backend-prod=ghcr.io/${{ env.IMAGE_NAME }}/backend:${{ steps.determine-tag.outputs.IMAGE_TAG }}
        
        # Build and apply
        kustomize build . | kubectl apply -f -
        
        # Wait for rollout
        kubectl rollout status deployment/edupoint-backend -n ${{ env.NAMESPACE }} --timeout=300s
    
    - name: Deploy Frontend
      if: ${{ (github.event_name == 'workflow_dispatch' && inputs.deploy-frontend) || github.event_name == 'workflow_run' }}
      run: |
        cd devops/kubernetes/overlays/prod
        
        # Update image tag
        kustomize edit set image \
          ghcr.io/rafeekpro/edupoint-frontend-prod=ghcr.io/${{ env.IMAGE_NAME }}/frontend:${{ steps.determine-tag.outputs.IMAGE_TAG }}
        
        # Build and apply
        kustomize build . | kubectl apply -f -
        
        # Wait for rollout
        kubectl rollout status deployment/edupoint-frontend -n ${{ env.NAMESPACE }} --timeout=300s
    
    - name: Verify deployment
      run: |
        echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "**Namespace:** ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image Tag:** ${{ steps.determine-tag.outputs.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "#### Deployments:" >> $GITHUB_STEP_SUMMARY
        kubectl get deployments -n ${{ env.NAMESPACE }} >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "#### Pods:" >> $GITHUB_STEP_SUMMARY
        kubectl get pods -n ${{ env.NAMESPACE }} >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "#### Services:" >> $GITHUB_STEP_SUMMARY
        kubectl get services -n ${{ env.NAMESPACE }} >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "#### Ingress:" >> $GITHUB_STEP_SUMMARY
        kubectl get ingress -n ${{ env.NAMESPACE }} >> $GITHUB_STEP_SUMMARY
    
    - name: Disconnect WireGuard
      if: always()
      run: |
        sudo wg-quick down wg0 || true

  run-e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: setup-vpn-and-deploy
    if: ${{ (github.event_name == 'workflow_dispatch' && inputs.run-e2e-tests) || github.event_name == 'workflow_run' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
    
    - name: Install dependencies
      run: |
        cd e2e-tests
        npm ci
        npx playwright install --with-deps
    
    - name: Run E2E tests
      run: |
        cd e2e-tests
        export BASE_URL=https://karnet.edupoint.pl
        export API_URL=https://karnetapi.edupoint.pl
        npm test
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: e2e-tests/playwright-report/
        retention-days: 30