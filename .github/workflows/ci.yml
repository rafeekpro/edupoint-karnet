name: CI - Build and Push Images

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'e2e-tests/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-backend:
    name: Build Backend API
    runs-on: ubuntu-latest
    outputs:
      version-tag: ${{ steps.meta.outputs.version }}
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ github.run_id }}-{{sha}}
    
    - name: Build and push Backend API
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          DB_HOST=${{ secrets.DB_HOST_PROD }}
          DB_PORT=${{ secrets.DB_PORT_PROD }}
          DB_NAME=therapy_system_prod
          DB_USER=${{ secrets.DB_USER_PROD }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD_PROD }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY_PROD }}
          ENVIRONMENT=production

  build-frontend:
    name: Build React Frontend
    runs-on: ubuntu-latest
    outputs:
      version-tag: ${{ steps.meta.outputs.version }}
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ github.run_id }}-{{sha}}
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          REACT_APP_API_URL=https://karnetapi.edupoint.pl
          REACT_APP_ENVIRONMENT=production

  build-e2e-tests:
    name: Build E2E Tests
    runs-on: ubuntu-latest
    outputs:
      version-tag: ${{ steps.meta.outputs.version }}
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/e2e-tests
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ github.run_id }}-{{sha}}
    
    - name: Create Dockerfile for E2E tests if not exists
      run: |
        if [ ! -f e2e-tests/Dockerfile ]; then
          cat > e2e-tests/Dockerfile << 'EOF'
        FROM mcr.microsoft.com/playwright:v1.40.1-focal
        
        WORKDIR /app
        
        COPY package*.json ./
        RUN npm ci
        
        COPY . .
        
        RUN npx playwright install chromium
        
        CMD ["npm", "test"]
        EOF
        fi
    
    - name: Build and push E2E Tests
      uses: docker/build-push-action@v5
      with:
        context: ./e2e-tests
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, build-e2e-tests]
    if: success()
    
    steps:
    - name: Build Summary
      run: |
        echo "### Build Completed Successfully! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "**Git SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version Tag:** ${{ github.run_id }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Built Images:" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ“¦ **Backend:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend\`" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸŽ¨ **Frontend:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend\`" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ§ª **E2E Tests:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/e2e-tests\`" >> $GITHUB_STEP_SUMMARY